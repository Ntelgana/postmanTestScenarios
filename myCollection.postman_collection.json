{
	"info": {
		"_postman_id": "8e8b396c-c297-4033-a7b9-965229e4c73a",
		"name": "myCollection",
		"description": "this collection will run all smoke API 's",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39242972"
	},
	"item": [
		{
			"name": "smoke",
			"item": [
				{
					"name": "get user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = \" postman tutorials\"\r",
									" \r",
									" console.log(\"the runnning pre request scripts in postman in \" + name)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed syntax \r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Total number of pages\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.total_pages).to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"veriyf email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].first_name).to.eql(\"Michael\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.execution.setNextRequest(\"update user\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users?page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createTokenApi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"token is \", function(){\r",
									"    const JsonData = pm.response.json()\r",
									"    const token= JsonData.token;\r",
									"    console.log(\"the token is \" +token)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var  name = \"Neo Postman\"\r",
									"console.log(\"the name to set is \" + name);\r",
									"console.warn(\"there is an error\");\r",
									"console.info(\"this is a comment\");\r",
									"\r",
									"var job = \"engineer\"\r",
									"console.log(\"the job to set is \" + job);\r",
									"pm.globals.set(\"username\", name);\r",
									"pm.globals.set(\"jobrole\", job);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"{{username}}\",\r\n    \"job\" : \"{{job role}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "regression",
			"item": [
				{
					"name": "create userf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"steel\",\r\n\"role\": \"tester\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check for status response is 200\" , function (){ pm.response.to.have.status(200)\r",
									"\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Delete request\")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"fatty\",\r\n    \"job\" : \"DJ\"\r\n\r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Steel name has been deleted\", function () {\r",
									"    pm.expect(pm.response.status).not.to.equal(\"Steel\");\r",
									"});\r",
									"\r",
									"\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "vehicles data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed SyntaxError by removing the extra closing curly brace\r",
									"pm.test(\"vehivled api status response \", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"the id of the 1st vehicle\", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.Results[0].Make_Name).to.equal(\"#1 ALPINE CUSTOMS\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.execution.setNextRequest(\"null\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vurl}}/api/vehicles/getallmakes?format=json",
							"host": [
								"{{vurl}}"
							],
							"path": [
								"api",
								"vehicles",
								"getallmakes"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Generated from cURL: curl --location 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json'"
					},
					"response": []
				}
			]
		}
	]
}